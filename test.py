import requests
import re


def escape_markdown_v2(text: str) -> str:
    # список всех спецсимволов MarkdownV2
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

text = """## 2. **Aud: Tashkent | Tadbirkor | 15$**

### Общее впечатление:
- **Бюджет:** 400 центов (4$ в день)
- **Интересы:** Предприниматели, Бизнес

### Плюсы:
- CPL иногда очень хороший: например, 5 августа — 0.746$, 6 августа — 0.96$.
- Средний CTR иногда выше 1%, бывают всплески интереса аудитории.
- CPM всегда <2$, структура показов хорошая.

### Минусы:
- Провалы как по CPL, так и по числу лидов. 4 августа — дорогой лид (5.1$!), 7-10 августа — лиды дорожают или нестабильны.
- Конверсия (CR) редко превышает 0.15, чаще держится на грани 0.09–0.12, что слабовато для целевого действия.
- В дни провалов по CPL/CR может быть неудачный креатив или аудитория слишком абстрактная (предпринимателей много, но они не всегда принимают решение об отоплении для частных объектов).

### Что делать:
- Не выключай полностью! Оставляй на тесте — предприниматели могут “выловить” интересные объекты под отопление (офисы, частные дома, строящиеся объекты).
- Нужно протестировать другой оффер: например, “Экономия на отоплении для бизнеса”, “Монтаж/проектирование под ключ для коммерческих зданий”.
- Раздели мужскую и женскую аудиторию, а также в идеале поставь возрастной сегмент: 28+."""


# resp = requests.get(f"https://api.telegram.org/bot7080784217:AAGHD7Ne0qp7IWC8b4xQu7yhfxdAKxw2uus/sendMessage?"
#              f"chat_id=6287458105&text={escape_markdown_v2(text)}&parse_mode=MarkdownV2")
import html


def api_markdown_to_telegram_html(text: str) -> str:
    # 1. Убираем Markdown-заголовки вида ## или ###
    text = re.sub(r'^\s*#+\s*', '', text, flags=re.MULTILINE)

    # 2. Конвертируем **жирный** в HTML <b>...</b>
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)

    # 3. Экранируем все HTML-опасные символы
    text = html.escape(text)

    # 4. Возвращаем <b>...</b> обратно
    text = text.replace('&lt;b&gt;', '<b>').replace('&lt;/b&gt;', '</b>')

    # 5. Обрабатываем абзацы: заменяем одиночные переносы на двойные
    # Это создаст визуальные отступы между строками в Telegram
    text = re.sub(r'\n', '\n\n', text)

    # 6. Убираем лишние тройные и более переносы
    text = re.sub(r'\n{3,}', '\n\n', text)

    return text


resp = requests.post(
    f"https://api.telegram.org/bot7080784217:AAGHD7Ne0qp7IWC8b4xQu7yhfxdAKxw2uus/sendMessage",
    json={
        "chat_id": 6287458105,
        "text": api_markdown_to_telegram_html(text),
        "parse_mode": "HTML"
    }
)

print(resp.json())


